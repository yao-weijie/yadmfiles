snippet snipfile "Luasnip file" b
	---@diagnostic disable unused-local
	local ls = require("luasnip")
	local s = ls.snippet
	local sn = ls.snippet_node
	local isn = ls.indent_snippet_node
	local t = ls.text_node
	local i = ls.insert_node
	local f = ls.function_node
	local c = ls.choice_node
	local d = ls.dynamic_node
	local r = ls.restore_node
	local events = require("luasnip.util.events")
	local ai = require("luasnip.nodes.absolute_indexer")
	local extras = require("luasnip.extras")
	local l = extras.lambda
	local rep = extras.rep
	local p = extras.partial
	local m = extras.match
	local n = extras.nonempty
	local dl = extras.dynamic_lambda
	local fmt = require("luasnip.extras.fmt").fmt
	local fmta = require("luasnip.extras.fmt").fmta
	local conds = require("luasnip.extras.expand_conditions")
	local postfix = require("luasnip.extras.postfix").postfix
	local types = require("luasnip.util.types")
	local parse = require("luasnip.util.parser").parse_snippet


	-- stylua: ignore
	return {
		$0
	}

snippet snip "fmt luasnip" b
    s({trig="${1:trigger}", dscr="${2:description}"}, fmt([[
        {1}$0
    ]], {
        i(1, "pos1")
    }), {}),

snippet sniplsp "lsp format snippet"
	parse({trig="${1:trigger}", dscr="${2:description}"}, "${3:body}", {})


snippet fmtignore "stylua format ignore" b
	-- stylua: ignore ${1:<nil>|start|end}
	$0

snippet func "Anonymous functions" iw
	function()
		$0
	end

snippet mod "module template"
	local M = {}

	M.setup = function(opts)
		$0
	end

	return M

snippet spec "lazy spec file"
	---@type LazySpec
	return {
		$0
	}
